-- TABLES

CREATE TABLE users (
  id INTEGER GENERATED BY DEFAULT  AS IDENTITY PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  username VARCHAR(20)  UNIQUE NOT NULL , 
  email VARCHAR(50) UNIQUE NOT NULL,
  password VARCHAR(250) NOT NULL
);

CREATE TABLE dataset (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE,
  name VARCHAR(50) NOT NULL,
  usr_id INT NOT NULL,
  date_time TIMESTAMP,
  private BOOL NOT NULL,
  FOREIGN KEY (usr_id) REFERENCES users (id),
  PRIMARY KEY (usr_id,name)
);

CREATE TABLE item (
  id INT,
  dataset_id INT,
  FOREIGN KEY (dataset_id) REFERENCES dataset (id) ON DELETE CASCADE,
  PRIMARY KEY (id, dataset_id)
);

CREATE TABLE client (
  id INT,
  dataset_id INT,
  FOREIGN KEY (dataset_id) REFERENCES dataset (id) ON DELETE CASCADE,
  PRIMARY KEY (id, dataset_id)
);

CREATE TABLE interaction (
  dataset_id INT NOT NULL,
  client_id INT NOT NULL,
  item_id INT NOT NULL,
  tmstamp TIMESTAMP NOT NULL,
  PRIMARY KEY (dataset_id,client_id,item_id, tmstamp)
);

CREATE TABLE metadata (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  dataset_id INT NOT NULL REFERENCES dataset(id) ON DELETE CASCADE
);

CREATE TABLE metadata_element (
  item_id INT NOT NULL,
  dataset_id INT NOT NULL,
  metadata_id INT NOT NULL REFERENCES metadata (id),
  description TEXT NOT NULL,
  data TEXT NOT NULL,
  FOREIGN KEY (item_id, dataset_id) REFERENCES item(id, dataset_id) ON DELETE CASCADE,
  PRIMARY KEY (item_id, metadata_id, description)
);

CREATE TABLE scenario (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE,
  name VARCHAR(50) NOT NULL,
  usr_id INT NOT NULL REFERENCES users(id),
  date_time TIMESTAMP,
  dataset_id INT NOT NULL REFERENCES dataset(id) ON DELETE CASCADE,
  sDate TIMESTAMP NOT NULL,
  eDate TIMESTAMP NOT NULL,
  max_items INT NOT NULL,
  min_items INT NOT NULL,
  max_clients INT NOT NULL,
  min_clients INT NOT NULL,
  PRIMARY KEY (usr_id,name)
  );

CREATE TABLE scenario_element (
  scenario_id INTEGER NOT NULL,
  client_id INT NOT NULL,
  item_id INT NOT NULL,
  tmstamp TIMESTAMP NOT NULL,
  PRIMARY KEY (scenario_id, client_id, item_id, tmstamp)
);
 
CREATE TABLE model (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE,
  usr_id INT NOT NULL REFERENCES users(id),
  name VARCHAR (50) NOT NULL,
  algorithm VARCHAR (50) NOT NULL,
  scenario_id INT NOT NULl REFERENCES scenario(id) ON DELETE CASCADE,
  date_time TIMESTAMP NOT NULL,
  parameters VARCHAR[][2] NOT NULL,
  matrix BYTEA,
  PRIMARY KEY (usr_id,name)
);

CREATE TABLE experiment (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE,
  usr_id INT NOT NULL REFERENCES users(id),
  name VARCHAR(50) NOT NULL,
  model_id INT NOT NULl REFERENCES model(id) ON DELETE CASCADE,
  date_time TIMESTAMP NOT NULL,
  retargeting BOOL NOT NULL,
  PRIMARY KEY (usr_id,name)
);

CREATE TABLE experiment_client (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE,
  name VARCHAR(50) NOT NULL,
  experiment_id INT NOT NULl REFERENCES experiment(id) ON DELETE CASCADE,
  recommendations INT[],
  history INT[],
  PRIMARY KEY (experiment_id, name)
);



-- FUNCTIONS AND TRIGGERS

--selects a subset of interactions between the given timestamps that belongs to the given dataset
CREATE OR REPLACE FUNCTION subset_for_scenario (TIMESTAMP, TIMESTAMP, INT)
RETURNS TABLE (client_id INT,item_id INT,tmstamp TIMESTAMP)
AS
$body$
	
	SELECT I1.client_id, I1.item_id, I1.tmstamp FROM interaction I1
	WHERE I1.dataset_id = $3
	AND I1.tmstamp BETWEEN $1 AND $2

$body$
LANGUAGE sql;

CREATE OR REPLACE FUNCTION subset_for_scenario ( INT)
RETURNS TABLE (client_id INT,item_id INT,tmstamp TIMESTAMP)
AS
$body$
	
	SELECT I1.client_id, I1.item_id, I1.tmstamp FROM interaction I1
	WHERE I1.dataset_id = $1

$body$
LANGUAGE sql;

--selects clients 
CREATE OR REPLACE FUNCTION subset_for_scenario_client (TIMESTAMP, TIMESTAMP, INT, INT, FLOAT DEFAULT 'infinity')
RETURNS TABLE (client_id INT)
AS
$body$

	SELECT I1.client_id FROM subset_for_scenario($1,$2,$3) I1
    GROUP BY I1.client_id
    HAVING  COUNT(I1.client_id) BETWEEN $4 AND $5

$body$
LANGUAGE sql;

CREATE OR REPLACE FUNCTION subset_for_scenario_client (INT, INT, FLOAT DEFAULT 'infinity')
RETURNS TABLE (client_id INT)
AS
$body$

	SELECT I1.client_id FROM subset_for_scenario($1) I1
    GROUP BY I1.client_id
    HAVING  COUNT(I1.client_id) BETWEEN $2 AND $3

$body$
LANGUAGE sql;

--selects clients 
CREATE OR REPLACE FUNCTION subset_for_scenario_item (TIMESTAMP, TIMESTAMP, INT, INT, FLOAT DEFAULT 'infinity')
RETURNS TABLE (item_id INT)
AS
$body$

	SELECT I1.item_id FROM subset_for_scenario($1,$2,$3) I1
    GROUP BY I1.item_id
    HAVING  COUNT(I1.item_id) BETWEEN $4 AND $5

$body$
LANGUAGE sql;

CREATE OR REPLACE FUNCTION subset_for_scenario_item (INT, INT, FLOAT DEFAULT 'infinity')
RETURNS TABLE (item_id INT)
AS
$body$

	SELECT I1.item_id FROM subset_for_scenario($1) I1
    GROUP BY I1.item_id
    HAVING  COUNT(I1.item_id) BETWEEN $2 AND $3

$body$
LANGUAGE sql;

--delete scenario_elements when scenario is deleted
CREATE OR REPLACE FUNCTION delete_scenario_elements ()
RETURNS TRIGGER
AS 
$body$
BEGIN
	DELETE FROM scenario_element 
	WHERE scenario_id = old.id; 
	RETURN OLD;
END;
$body$
LANGUAGE plpgsql;


CREATE TRIGGER delete_scenario_trigger 
BEFORE DELETE
ON scenario
FOR EACH ROW
EXECUTE FUNCTION  delete_scenario_elements ();

--delete interactions when dataset is deleted
CREATE OR REPLACE FUNCTION delete_interactions()
RETURNS TRIGGER
AS 
$body$
BEGIN
	DELETE FROM interaction 
	WHERE dataset_id = old.id; 
	RETURN OLD;
END;
$body$
LANGUAGE plpgsql;


CREATE TRIGGER delete_dataset_trigger 
BEFORE DELETE
ON dataset
FOR EACH ROW
EXECUTE FUNCTION  delete_interactions();